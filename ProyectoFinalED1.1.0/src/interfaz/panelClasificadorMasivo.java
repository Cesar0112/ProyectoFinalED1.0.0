/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package interfaz;

import CSV.CSV;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logica.KNN;
import logica.Patron;

/**
 *
 * @author Cesar
 */
public class panelClasificadorMasivo extends javax.swing.JPanel {

    /**
     * Creates new form panelClasificadorMasivo
     */
    private CSV CsvPatronesNoCLasificados;
    private CSV patronesDeEntrenamiento;
    private KNN knn;
    private Object[][] matrizDistancia;

    public panelClasificadorMasivo(CSV patronesEntrenamiento) {
        /*Esto es para escojer el archivo */
        this.patronesDeEntrenamiento = patronesEntrenamiento;
        do {
            try {
                JFileChooser fc = new JFileChooser();
                fc.setDialogTitle("Escoja un fichero que contenga los patrones no clasificados");
                int reaccion = fc.showOpenDialog(null);
                if (reaccion == JFileChooser.APPROVE_OPTION) {
                    CsvPatronesNoCLasificados = new CSV(fc);
                } else {
                    JOptionPane.showMessageDialog(null, "Debe escojer los patrones no clasificados");
                    CsvPatronesNoCLasificados = null;
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } while (CsvPatronesNoCLasificados == null);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClasificacionesNuevas = new javax.swing.JTable();
        lblPatronesSinClasificar = new javax.swing.JLabel();
        lblNuevasClasificaciones = new javax.swing.JLabel();
        spinnerK = new javax.swing.JSpinner();
        lblValorK = new javax.swing.JLabel();
        botonEscojerPatronesNoCLasificados = new javax.swing.JButton();
        botonClasificar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        lblMatrizDistancias = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaPatronesNoClasificados = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMatrizDistancias = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaClasificacionesNuevas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clasificación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaClasificacionesNuevas.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaClasificacionesNuevas);
        if (tablaClasificacionesNuevas.getColumnModel().getColumnCount() > 0) {
            tablaClasificacionesNuevas.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 140, 490));

        lblPatronesSinClasificar.setText("Patrones sin clasificar");
        add(lblPatronesSinClasificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        lblNuevasClasificaciones.setText("Nuevas clasificaciones");
        add(lblNuevasClasificaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));

        spinnerK.setModel(new javax.swing.SpinnerNumberModel(1, 1, CsvPatronesNoCLasificados.getPatrones().size(), 2));
        spinnerK.setToolTipText("Ingrese el valor K");
        add(spinnerK, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 540, 70, -1));

        lblValorK.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblValorK.setText("         Valor K:");
        add(lblValorK, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, -1, 20));

        botonEscojerPatronesNoCLasificados.setText("Escojer patrones sin clasificar");
        botonEscojerPatronesNoCLasificados.setToolTipText("Abre un selector de archivos para escojer un fichero de texto que contenga patrones nuevos sin clasificar");
        botonEscojerPatronesNoCLasificados.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        botonEscojerPatronesNoCLasificados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscojerPatronesNoCLasificadosActionPerformed(evt);
            }
        });
        add(botonEscojerPatronesNoCLasificados, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 540, -1, -1));

        botonClasificar.setText("Clasificar");
        botonClasificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonClasificarActionPerformed(evt);
            }
        });
        add(botonClasificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 540, 104, -1));

        jButton1.setText("Escribir en archivo binario");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 540, 200, -1));

        lblMatrizDistancias.setText("Matriz de distancias");
        add(lblMatrizDistancias, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, -1, -1));

        Object[][] patronesNoCLasificados = new Object[CsvPatronesNoCLasificados.getPatrones().size()][CsvPatronesNoCLasificados.getPatrones().get(0).getNumberOfParametters()];
        for (int i = 0; i < CsvPatronesNoCLasificados.getPatrones().size(); i++) {
            for (int j = 0; j < CsvPatronesNoCLasificados.getPatrones().get(0).getNumberOfParametters(); j++) {
                patronesNoCLasificados[i][j] = CsvPatronesNoCLasificados.getPatrones().get(i).getParametros()[j];
            }
        }
        tablaPatronesNoClasificados.setModel(new javax.swing.table.DefaultTableModel(
            patronesNoCLasificados,
            new String [] {
                "Longitud del sépalo", "Ancho del sépalo", "Longitud del pétalo", "Ancho del pétalo"
            }
        ));
        tablaPatronesNoClasificados.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tablaPatronesNoClasificados);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 370, 490));

        tablaMatrizDistancias.setModel(new javax.swing.table.DefaultTableModel(
            null,
            new String[]{}
        ));
        tablaMatrizDistancias.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaMatrizDistancias);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, 490, 490));
    }// </editor-fold>//GEN-END:initComponents

    private void botonEscojerPatronesNoCLasificadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscojerPatronesNoCLasificadosActionPerformed

        int reaccion = -1;
        try {
            JFileChooser fc = new JFileChooser();
            fc.setDialogTitle("Escoja un fichero que contenga los patrones no clasificados");
            reaccion = fc.showOpenDialog(null);
            CsvPatronesNoCLasificados = new CSV(fc);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        actualizarTablaPatronesNoClasificados(reaccion);
    }//GEN-LAST:event_botonEscojerPatronesNoCLasificadosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (matrizDistancia!=null) {
            if (JOptionPane.showConfirmDialog(null, "Está seguro que desea escribir la matriz de distancias en un archivo binario") == JOptionPane.OK_OPTION) {
                Binario.Binario.escribir(matrizDistancia);
            }
        }else{
            JOptionPane.showMessageDialog(null, "La matriz de distancias entre los patrones de entrenamiento\n y los patrones no identificados está vacía llénela antes de usarla");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /*Este función es de un boton que es para clasificar*/
    private void botonClasificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonClasificarActionPerformed
        int reaccion = 0;
        if (((Integer) spinnerK.getValue()) < ((patronesDeEntrenamiento.getPatrones().size()) * (0.75))) {//esto lo pongo para advertir al usuario que tal vez está usando un k muy grande
            reaccion = JOptionPane.showConfirmDialog(null, "Desea realizar la clasificación con los parámetros establecidos.");
            if (reaccion == 0) {// si confirmó
                clasificacion();
            }
        } else {
            reaccion = JOptionPane.showConfirmDialog(null, "Desea realizar la clasificación a pesar de elegir un K muy grande \n Recomendación elija un valor de K pequeño.");
            if (reaccion == 0) {// si confirmó
                clasificacion();
            }
        }
    }//GEN-LAST:event_botonClasificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonClasificar;
    private javax.swing.JButton botonEscojerPatronesNoCLasificados;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblMatrizDistancias;
    private javax.swing.JLabel lblNuevasClasificaciones;
    private javax.swing.JLabel lblPatronesSinClasificar;
    private javax.swing.JLabel lblValorK;
    private javax.swing.JSpinner spinnerK;
    private javax.swing.JTable tablaClasificacionesNuevas;
    private javax.swing.JTable tablaMatrizDistancias;
    private javax.swing.JTable tablaPatronesNoClasificados;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the csv
     */
    public CSV getCsvPatronesNoCLasificados() {
        return CsvPatronesNoCLasificados;
    }

    /**
     * @return the knn
     */
    public KNN getKnn() {
        return knn;
    }

    /**
     * @return the patronesDeEntrenamiento
     */
    public CSV getPatronesDeEntrenamiento() {
        return patronesDeEntrenamiento;
    }

    private void actualizarTablaPatronesNoClasificados(int reaccion) {

        if (reaccion == JFileChooser.APPROVE_OPTION) {
            tablaPatronesNoClasificados.setModel(new javax.swing.table.DefaultTableModel(
                    null,
                    new String[]{
                        "Longitud del sépalo", "Ancho del sépalo", "Longitud del pétalo", "Ancho del pétalo"
                    }
            ));
            Object[][] patronesNoCLasificados = new Object[CsvPatronesNoCLasificados.getPatrones().size()][CsvPatronesNoCLasificados.getPatrones().get(0).getNumberOfParametters()];
            for (int i = 0; i < CsvPatronesNoCLasificados.getPatrones().size(); i++) {
                for (int j = 0; j < CsvPatronesNoCLasificados.getPatrones().get(0).getNumberOfParametters(); j++) {
                    patronesNoCLasificados[i][j] = CsvPatronesNoCLasificados.getPatrones().get(i).getParametros()[j];
                }
            }
            tablaPatronesNoClasificados.setModel(new javax.swing.table.DefaultTableModel(
                    patronesNoCLasificados,
                    new String[]{
                        "Longitud del sépalo", "Ancho del sépalo", "Longitud del pétalo", "Ancho del pétalo"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }
    }

    private void clasificacion() {

        /*Itera por cada patron sin clasificar */
        Iterator<Patron> ite = CsvPatronesNoCLasificados.getPatrones().iterator();
        Object[][] clasificaciones = new Object[CsvPatronesNoCLasificados.getPatrones().size()][1];
        int i = 0;

        matrizDistancia = new Object[patronesDeEntrenamiento.getPatrones().size()][CsvPatronesNoCLasificados.getPatrones().size()];
        //clasifica cada patron no clasificado y a la vez va llenando la matriz de clasificaciones nuevas
        while (ite.hasNext()) {
            knn = new KNN((Integer) (spinnerK.getValue()), patronesDeEntrenamiento.getPatrones());

            String nuevaClasificacion = knn.clasificaPatron(ite.next());
            clasificaciones[i][0] = nuevaClasificacion;

            i++;

        }
        //llena la matriz de distancias entre los patrones de entrenamiento y los no clasificados
        for (int fila = 0; fila < patronesDeEntrenamiento.getPatrones().size(); fila++) {
            for (int col = 0; col < CsvPatronesNoCLasificados.getPatrones().size(); col++) {
                matrizDistancia[fila][col] = knn.calculaDistancia(patronesDeEntrenamiento.getPatrones().get(fila), CsvPatronesNoCLasificados.getPatrones().get(col));
            }
        }
        String[] nombreColumn = new String[CsvPatronesNoCLasificados.getPatrones().size()];
        //le pongo los nombres a las columnas
        for (int c = 0; c < CsvPatronesNoCLasificados.getPatrones().size(); c++) {
            nombreColumn[c] = String.valueOf(c + 1);
        }
        tablaClasificacionesNuevas.setModel(new javax.swing.table.DefaultTableModel(clasificaciones, new String[]{"Clasificación"}));
        tablaMatrizDistancias.setModel(new javax.swing.table.DefaultTableModel(matrizDistancia, nombreColumn));
    }
}
